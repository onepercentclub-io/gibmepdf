name: Deployment-Prod-ECS

on:
  workflow_dispatch:

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: production/gibmepdf-prod
  ECS_SERVICE: gibmepdf-prod
  ECS_CLUSTER: one-prod
  ECS_TASK_DEFINITION: .aws/prod-task-definition.json
  CONTAINER_NAME: "gibmepdf-prod"
  TARGET_GROUP_ARN: "arn:aws:elasticloadbalancing:ap-south-1:029681309014:targetgroup/tg-gibmepdf-prod/ad7c835ae10f515f" 

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push:
    name: Build and Push Image
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.set-image-tag-output.outputs.image-tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: github-actions
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Set Image tag
        id: set-image-tag-output
        run : |
          echo "image-tag=${{ github.sha }}" >> "$GITHUB_OUTPUT"

  update-task-def:
    name: Update Task Definition
    runs-on: ubuntu-latest
    needs: build-and-push
    outputs:
      task-definition-path: ${{ steps.update-task-def.outputs.task-definition-path }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: github-actions
          aws-region: ${{ env.AWS_REGION }}

      - name: Update Task Definition
        id: update-task-def
        env: 
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          IMAGE_TAG: ${{ needs.build-and-push.outputs.image-tag }}
        run: |
          set -e

          IMAGE_URI="${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
          echo "IMAGE_URI=${IMAGE_URI}"

          # Ensure IMAGE_URI is not empty
          if [ -z "$IMAGE_URI" ]; then
          echo "Error: IMAGE_URI is empty"
          exit 1
          fi

          # Create a new task definition with the updated image
          jq --arg IMAGE_URI "$IMAGE_URI" '.containerDefinitions[0].image = $IMAGE_URI' ${{ env.ECS_TASK_DEFINITION }} > final-task-definition.json
          cat final-task-definition.json

          echo "::set-output name=task-definition-path::${{ github.workspace }}/final-task-definition.json"

      - name: Upload Task Definition Artifact
        uses: actions/upload-artifact@v3
        with:
          name: final-task-definition
          path: final-task-definition.json

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: update-task-def
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: github-actions
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Task Definition Artifact
        uses: actions/download-artifact@v3
        with:
          name: final-task-definition
          path: ${{ github.workspace }}

      - name: Deploy Amazon ECS Task Definition
        id: deploy-task
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ github.workspace }}/final-task-definition.json
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Update ECS Service with Load Balancer
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE }} \
          --load-balancers "targetGroupArn=${{ env.TARGET_GROUP_ARN }},containerName=${{ env.CONTAINER_NAME }},containerPort=2305"
